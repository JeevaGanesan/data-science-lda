{"results": {"content_files": {"name": "README.md", "path": "README.md", "content": "Test-Driven Data Analysis (Python TDDA library)\n===============================================\n\nWhat is it?\n-----------\n\nThe TDDA Python module provides command-line and Python API support for\nthe overall process of data analysis, through the following tools:\n\n - **Reference Testing**: extensions to `unittest` and `pytest` for\n   managing testing of data analysis pipelines, where the results are\n   typically much larger, and more complex, than single numerical\n   values.\n\n - **Constraints**: tools (and API) for discovery of constraints from data,\n   for validation of constraints on new data, and for anomaly detection.\n\n - **Finding Regular Expressions**: tools (and API) for automatically\n   inferring regular expressions from text data.\n\nDocumentation\n-------------\n\nhttp://tdda.readthedocs.io\n\nInstallation\n------------\n\nThe simplest way to install all of the TDDA Python modules is using *pip*:\n\n    pip install tdda\n\nThe full set of sources, including all examples, are downloadable from\nPyPi with:\n\n    pip download --no-binary :all: tdda\n\nThe sources are also publicly available from Github:\n\n    git clone git@github.com:tdda/tdda.git\n\nDocumentation is available at http://tdda.readthedocs.io.\n\nIf you clone the Github repo, use\n\n    python setup.py install\n\nafterwards to install the command-line tools (`tdda` and `rexpy`).\n\n\n*Reference Tests*\n-----------------\n\nThe `tdda.referencetest` library is used to support\nthe creation of *reference tests*, based on either unittest or pytest.\n\nThese are like other tests except:\n\n  1. They have special support for comparing strings to files\n     and files to files.\n  2. That support includes the ability to provide exclusion patterns\n     (for things like dates and versions that might be in the output).\n  3. When a string/file assertion fails, it spits out the command you\n     need to diff the output.\n  4. If there were exclusion patterns, it also writes modified versions\n     of both the actual and expected output and also prints the diff\n     command needed to compare those.\n  5. They have special support for handling CSV files.\n  6. It supports flags (-w and -W)  to rewrite the reference (expected)\n     results once you have confirmed that the new actuals are correct.\n\nFor more details from a source distribution or checkout, see the `README.md`\nfile and examples in the `referencetest` subdirectory.\n\n*Constraints*\n-------------\n\nThe `tdda.constraints` library is used to 'discover' constraints\nfrom a (Pandas) DataFrame, write them out as JSON, and to verify that\ndatasets meet the constraints in the constraints file.\n\nFor more details from a source distribution or checkout, see the `README.md`\nfile and examples in the `constraints` subdirectory.\n\n*Finding Regular Expressions*\n-----------------------------\n\nThe `tdda` repository also includes `rexpy`, a tool for automatically\ninferring regular expressions from a single field of data examples.\n\n*Resources*\n-----------\n\nResources on these topics include:\n\n  * TDDA Blog: http://www.tdda.info\n  * Quick Reference Guide (\"Cheatsheet\"): http://www.tdda.info/pdf/tdda-quickref.pdf\n  * Full documentation: http://tdda.readthedocs.io\n  * General Notes on Constraints and Assertions: http://www.tdda.info/constraints-and-assertions\n  * Notes on using the Pandas constraints library:\n    http://www.tdda.info/constraint-discovery-and-verification-for-pandas-dataframes\n  * PyCon UK Talk on TDDA:\n      - Video: https://www.youtube.com/watch?v=FIw_7aUuY50\n      - Slides and Rough Transcript:   http://www.tdda.info/slides-and-rough-transcript-of-tdda-talk-from-pycon-uk-2016\n\nAll examples, tests and code run under Python 2.7, Python 3.5 and Python 3.6.\n\n"}}}