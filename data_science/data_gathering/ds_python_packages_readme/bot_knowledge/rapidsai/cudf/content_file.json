{"results": {"content_files": {"name": "README.md", "path": "README.md", "content": "# <div align=\"left\"><img src=\"img/rapids_logo.png\" width=\"90px\"/>&nbsp;cuDF - GPU DataFrames</div>\n\n[![Build Status](https://gpuci.gpuopenanalytics.com/job/rapidsai/job/gpuci/job/cudf/job/branches/job/cudf-branch-pipeline/badge/icon)](https://gpuci.gpuopenanalytics.com/job/rapidsai/job/gpuci/job/cudf/job/branches/job/cudf-branch-pipeline/)\n\n**NOTE:** For the latest stable [README.md](https://github.com/rapidsai/cudf/blob/master/README.md) ensure you are on the `master` branch.\n\nBuilt based on the [Apache Arrow](http://arrow.apache.org/) columnar memory format, cuDF is a GPU DataFrame library for loading, joining, aggregating, filtering, and otherwise manipulating data.\n\ncuDF provides a pandas-like API that will be familiar to data engineers & data scientists, so they can use it to easily accelerate their workflows without going into the details of CUDA programming.\n\nFor example, the following snippet downloads a CSV, then uses the GPU to parse it into rows and columns and run calculations:\n```python\nimport cudf, io, requests\nfrom io import StringIO\n\nurl = \"https://github.com/plotly/datasets/raw/master/tips.csv\"\ncontent = requests.get(url).content.decode('utf-8')\n\ntips_df = cudf.read_csv(StringIO(content))\ntips_df['tip_percentage'] = tips_df['tip'] / tips_df['total_bill'] * 100\n\n# display average tip by dining party size\nprint(tips_df.groupby('size').tip_percentage.mean())\n```\n\nOutput:\n```\nsize\n1    21.729201548727808\n2    16.571919173482897\n3    15.215685473711837\n4    14.594900639351332\n5    14.149548965142023\n6    15.622920072028379\nName: tip_percentage, dtype: float64\n```\n\nFor additional examples, browse our complete [API documentation](https://docs.rapids.ai/api/cudf/stable/), or check out our more detailed [notebooks](https://github.com/rapidsai/notebooks-contrib).\n\n## Quick Start\n\nPlease see the [Demo Docker Repository](https://hub.docker.com/r/rapidsai/rapidsai/), choosing a tag based on the NVIDIA CUDA version you\u2019re running. This provides a ready to run Docker container with example notebooks and data, showcasing how you can utilize cuDF.\n\n## Installation\n\n### Conda\n\ncuDF can be installed with conda ([miniconda](https://conda.io/miniconda.html), or the full [Anaconda distribution](https://www.anaconda.com/download)) from the `rapidsai` channel:\n\nFor `cudf version == 0.13` :\n```bash\n# for CUDA 9.2\nconda install -c rapidsai -c nvidia -c numba -c conda-forge \\\n    cudf=0.13 python=3.6 cudatoolkit=9.2\n\n# or, for CUDA 10.0\nconda install -c rapidsai -c nvidia -c numba -c conda-forge \\\n    cudf=0.13 python=3.6 cudatoolkit=10.0\n\n# or, for CUDA 10.1\nconda install -c rapidsai -c nvidia -c numba -c conda-forge \\\n    cudf=0.13 python=3.6 cudatoolkit=10.1\n```\n\nFor the nightly version of `cudf` :\n```bash\n# for CUDA 9.2\nconda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n    cudf python=3.6 cudatoolkit=9.2\n\n# or, for CUDA 10.0\nconda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n    cudf python=3.6 cudatoolkit=10.0\n```\n\nNote: cuDF is supported only on Linux, and with Python versions 3.6 or 3.7.\n\nSee the [Get RAPIDS version picker](https://rapids.ai/start.html) for more OS and version info. \n\n## Build/Install from Source\nSee build [instructions](CONTRIBUTING.md#setting-up-your-build-environment).\n\n## Contributing\n\nPlease see our [guide for contributing to cuDF](CONTRIBUTING.md).\n\n## Contact\n\nFind out more details on the [RAPIDS site](https://rapids.ai/community.html)\n\n## <div align=\"left\"><img src=\"img/rapids_logo.png\" width=\"265px\"/></div> Open GPU Data Science\n\nThe RAPIDS suite of open source software libraries aim to enable execution of end-to-end data science and analytics pipelines entirely on GPUs. It relies on NVIDIA\u00ae CUDA\u00ae primitives for low-level compute optimization, but exposing that GPU parallelism and high-bandwidth memory speed through user-friendly Python interfaces.\n\n<p align=\"center\"><img src=\"img/rapids_arrow.png\" width=\"80%\"/></p>\n\n### Apache Arrow on GPU\n\nThe GPU version of [Apache Arrow](https://arrow.apache.org/) is a common API that enables efficient interchange of tabular data between processes running on the GPU. End-to-end computation on the GPU avoids unnecessary copying and converting of data off the GPU, reducing compute time and cost for high-performance analytics common in artificial intelligence workloads. As the name implies, cuDF uses the Apache Arrow columnar data format on the GPU. Currently, a subset of the features in Apache Arrow are supported.\n"}}}