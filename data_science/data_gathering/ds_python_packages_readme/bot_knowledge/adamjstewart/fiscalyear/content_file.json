{"results": {"content_files": {"name": "README.rst", "path": "README.rst", "content": ".. image:: https://travis-ci.org/adamjstewart/fiscalyear.svg?branch=master\n   :target: https://travis-ci.org/adamjstewart/fiscalyear\n\n.. image:: https://codecov.io/gh/adamjstewart/fiscalyear/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/adamjstewart/fiscalyear\n\n.. image:: https://readthedocs.org/projects/fiscalyear/badge/?version=latest\n   :target: https://fiscalyear.readthedocs.io\n\n.. image:: https://badge.fury.io/py/fiscalyear.svg\n   :target: https://pypi.org/project/fiscalyear/\n\n.. image:: https://anaconda.org/conda-forge/fiscalyear/badges/version.svg\n   :target: https://anaconda.org/conda-forge/fiscalyear\n\n\nOverview\n========\n\n`fiscalyear <https://github.com/adamjstewart/fiscalyear>`_ is a small, lightweight Python module providing helpful utilities for managing the fiscal calendar. It is designed as an extension of the built-in `datetime <https://docs.python.org/3/library/datetime.html>`_ and `calendar <https://docs.python.org/3/library/calendar.html>`_ modules, adding the ability to query the fiscal year and fiscal quarter of a date or datetime object.\n\n\nBasic Usage\n===========\n\n``fiscalyear`` provides several useful classes.\n\nFiscalYear\n----------\n\nThe ``FiscalYear`` class provides an object for storing information about the start and end of a particular fiscal year.\n\n.. code-block:: python\n\n   >>> from fiscalyear import *\n   >>> a = FiscalYear(2017)\n   >>> a.start\n   FiscalDateTime(2016, 10, 1, 0, 0)\n   >>> a.end\n   FiscalDateTime(2017, 9, 30, 23, 59, 59)\n\nYou can also get the current ``FiscalYear`` with:\n\n.. code-block:: python\n\n   >>> FiscalYear.current()\n   FiscalYear(2018)\n\nFiscalQuarter\n-------------\n\nThe ``FiscalYear`` class also allows you to query information about a specific quarter.\n\n.. code-block:: python\n\n   >>> a.q3.start\n   FiscalDateTime(2017, 4, 1, 0, 0)\n   >>> a.q3.end\n   FiscalDateTime(2017, 6, 30, 23, 59, 59)\n\n\nThese objects represent the standalone ``FiscalQuarter`` class.\n\n.. code-block:: python\n\n   >>> b = FiscalQuarter(2017, 3)\n   >>> b.start\n   FiscalDateTime(2017, 4, 1, 0, 0)\n   >>> b.end\n   FiscalDateTime(2017, 6, 30, 23, 59, 59)\n   >>> a.q3 == b\n   True\n   >>> b in a\n   True\n\nYou can also get the current ``FiscalQuarter`` with:\n\n.. code-block:: python\n\n   >>> FiscalQuarter.current()\n   FiscalQuarter(2018, 2)\n\nFiscalDateTime\n--------------\n\nThe start and end of each quarter are stored as instances of the ``FiscalDateTime`` class. This class provides all of the same features as the ``datetime`` class, with the addition of the ability to query the fiscal year and quarter.\n\n.. code-block:: python\n\n   >>> c = FiscalDateTime.now()\n   >>> c\n   FiscalDateTime(2017, 4, 8, 20, 30, 31, 105323)\n   >>> c.fiscal_year\n   2017\n   >>> c.quarter\n   3\n   >>> c.next_quarter\n   FiscalQuarter(2017, 4)\n\n\nFiscalDate\n----------\n\nIf you don't care about the time component of the ``FiscalDateTime`` class, the ``FiscalDate`` class is right for you.\n\n.. code-block:: python\n\n   >>> d = FiscalDate.today()\n   >>> d\n   FiscalDate(2017, 4, 8)\n   >>> d.fiscal_year\n   2017\n   >>> d.prev_fiscal_year\n   FiscalYear(2016)\n\n\nInstallation\n============\n\n``fiscalyear`` has no dependencies, making it simple and easy to install. The recommended way to install ``fiscalyear`` is with ``pip``.\n\n.. code-block:: console\n\n   $ pip install fiscalyear\n\n\nFor alternate installation methods, see the `Installation Documentation <http://fiscalyear.readthedocs.io/en/latest/installation.html>`_.\n\n\nDocumentation\n=============\n\nDocumentation is hosted on `Read the Docs <http://fiscalyear.readthedocs.io/en/latest/index.html>`_.\n"}}}