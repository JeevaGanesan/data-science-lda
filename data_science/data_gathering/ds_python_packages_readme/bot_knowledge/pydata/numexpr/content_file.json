{"results": {"content_files": {"name": "README.rst", "path": "README.rst", "content": "======================================================\nNumExpr: Fast numerical expression evaluator for NumPy\n======================================================\n\n:Author: David M. Cooke, Francesc Alted and others\n:Contact: faltet@gmail.com\n:URL: https://github.com/pydata/numexpr\n:Documentation: http://numexpr.readthedocs.io/en/latest/\n:Travis CI: |travis|\n:Appveyor: |appveyor|\n:PyPi: |version|\n:DOI: |doi|\n:readthedocs: |docs|\n\n.. |travis| image:: https://travis-ci.org/pydata/numexpr.png?branch=master\n        :target: https://travis-ci.org/pydata/numexpr\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/we2ff01vqlmlb9ip\n        :target: https://ci.appveyor.com/project/robbmcleod/numexpr\n.. |docs| image:: https://readthedocs.org/projects/numexpr/badge/?version=latest\n        :target: http://numexpr.readthedocs.io/en/latest\n.. |doi| image:: https://zenodo.org/badge/doi/10.5281/zenodo.2483274.svg\n        :target:  https://doi.org/10.5281/zenodo.2483274\n.. |version| image:: https://img.shields.io/pypi/v/numexpr.png\n        :target: https://pypi.python.org/pypi/numexpr\n\n\nWhat is NumExpr?\n----------------\n\nNumExpr is a fast numerical expression evaluator for NumPy.  With it,\nexpressions that operate on arrays (like :code:`'3*a+4*b'`) are accelerated\nand use less memory than doing the same calculation in Python.\n\nIn addition, its multi-threaded capabilities can make use of all your\ncores -- which generally results in substantial performance scaling compared\nto NumPy.\n\nLast but not least, numexpr can make use of Intel's VML (Vector Math\nLibrary, normally integrated in its Math Kernel Library, or MKL).\nThis allows further acceleration of transcendent expressions.\n\n\nHow NumExpr achieves high performance\n-------------------------------------\n\nThe main reason why NumExpr achieves better performance than NumPy is\nthat it avoids allocating memory for intermediate results. This\nresults in better cache utilization and reduces memory access in\ngeneral. Due to this, NumExpr works best with large arrays.\n\nNumExpr parses expressions into its own op-codes that are then used by\nan integrated computing virtual machine. The array operands are split\ninto small chunks that easily fit in the cache of the CPU and passed\nto the virtual machine. The virtual machine then applies the\noperations on each chunk. It's worth noting that all temporaries and\nconstants in the expression are also chunked. Chunks are distributed among \nthe available cores of the CPU, resulting in highly parallelized code \nexecution.\n\nThe result is that NumExpr can get the most of your machine computing\ncapabilities for array-wise computations. Common speed-ups with regard\nto NumPy are usually between 0.95x (for very simple expressions like\n:code:`'a + 1'`) and 4x (for relatively complex ones like :code:`'a*b-4.1*a >\n2.5*b'`), although much higher speed-ups can be achieved for some functions \nand complex math operations (up to 15x in some cases).\n\nNumExpr performs best on matrices that are too large to fit in L1 CPU cache. \nIn order to get a better idea on the different speed-ups that can be achieved \non your platform, run the provided benchmarks.\n\n\nUsage\n-----\n\n::\n\n  >>> import numpy as np\n  >>> import numexpr as ne\n\n  >>> a = np.arange(1e6)   # Choose large arrays for better speedups\n  >>> b = np.arange(1e6)\n\n  >>> ne.evaluate(\"a + 1\")   # a simple expression\n  array([  1.00000000e+00,   2.00000000e+00,   3.00000000e+00, ...,\n           9.99998000e+05,   9.99999000e+05,   1.00000000e+06])\n\n  >>> ne.evaluate('a*b-4.1*a > 2.5*b')   # a more complex one\n  array([False, False, False, ...,  True,  True,  True], dtype=bool)\n\n  >>> ne.evaluate(\"sin(a) + arcsinh(a/b)\")   # you can also use functions\n  array([        NaN,  1.72284457,  1.79067101, ...,  1.09567006,\n          0.17523598, -0.09597844])\n\n  >>> s = np.array(['abba', 'abbb', 'abbcdef'])\n  >>> ne.evaluate(\"'abba' == s\")   # string arrays are supported too\n  array([ True, False, False], dtype=bool)\n\n\nDocumentation\n-------------\n\nPlease see the official documentation at `numexpr.readthedocs.io <https://numexpr.readthedocs.io>`_.\nIncluded is a user guide, benchmark results, and the reference API.\n\n\nAuthors\n-------\n\nPlease see `AUTHORS.txt <https://github.com/pydata/numexpr/blob/master/AUTHORS.txt>`_.\n\n\nLicense\n-------\n\nNumExpr is distributed under the `MIT <http://www.opensource.org/licenses/mit-license.php>`_ license.\n\n\n.. Local Variables:\n.. mode: text\n.. coding: utf-8\n.. fill-column: 70\n.. End:\n"}}}