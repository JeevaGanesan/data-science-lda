{"results": {"content_files": {"name": "README.md", "path": "README.md", "content": "<p align=\"center\"><img width=\"40%\" src=\"docs/ONNX_logo_main.png\" /></p>\n\n[![Build Status](https://img.shields.io/travis/onnx/onnx/master.svg?label=Linux)](https://travis-ci.org/onnx/onnx)\n[![Build status](https://img.shields.io/appveyor/ci/onnx/onnx/master.svg?label=Windows)](https://ci.appveyor.com/project/onnx/onnx)\n[![Build Status](https://img.shields.io/jenkins/s/http/powerci.osuosl.org/onnx-ppc64le-nightly-build.svg?label=Linux%20ppc64le)](http://powerci.osuosl.org/job/onnx-ppc64le-nightly-build/)\n\n[Open Neural Network Exchange (ONNX)](https://onnx.ai) is an open ecosystem that empowers AI developers\nto choose the right tools as their project evolves. ONNX provides an open source format for AI models, both deep learning and traditional ML. It defines an extensible computation graph model, as well as definitions of built-in operators and standard\ndata types. Currently we focus on the capabilities needed for inferencing (scoring).\n\nONNX is [widely supported](http://onnx.ai/supported-tools) and can be found in many frameworks, tools, and hardware. Enabling interoperability between different frameworks and streamlining the path from research to production helps increase the speed of innovation in the AI community. We invite the community to join us and further evolve ONNX.\n\n# Use ONNX\n* [Tutorials for creating ONNX models](https://github.com/onnx/tutorials).\n* [Pre-trained ONNX models](https://github.com/onnx/models)\n\n# Learn about the ONNX spec\n* [Overview](docs/Overview.md)\n* [ONNX intermediate representation spec](docs/IR.md)\n* [Versioning principles of the spec](docs/Versioning.md)\n* [Operators documentation](docs/Operators.md)\n* [Python API Overview](docs/PythonAPIOverview.md)\n\n# Programming utilities for working with ONNX Graphs\n* [Shape and Type Inference](docs/ShapeInference.md)\n* [Graph Optimization](docs/Optimizer.md)\n* [Opset Version Conversion](docs/VersionConverter.md)\n\n# Contribute\nONNX is a [community project](community). We encourage you to join the effort and contribute feedback, ideas, and code. You can participate in the [SIGs](community/sigs.md) and [Working Groups](community/working-groups.md) to shape the future of ONNX.\n\nCheck out our [contribution guide](https://github.com/onnx/onnx/blob/master/docs/CONTRIBUTING.md) to get started.\n\nIf you think some operator should be added to ONNX specification, please read\n[this document](docs/AddNewOp.md).\n\n# Discuss\nWe encourage you to open [Issues](https://github.com/onnx/onnx/issues), or use Gitter for more real-time discussion:\n[![Join the chat at https://gitter.im/onnx/Lobby](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/onnx/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n# Follow Us\nStay up to date with the latest ONNX news. [[Facebook](https://www.facebook.com/onnxai/)] [[Twitter](https://twitter.com/onnxai)]\n\n\n\n\n\n\n# Installation\n\n## Binaries\n\nA binary build of ONNX is available from [Conda](https://conda.io), in [conda-forge](https://conda-forge.org/):\n\n```\nconda install -c conda-forge onnx\n```\n\n## Source\n\n### Linux and MacOS\nYou will need an install of protobuf and numpy to build ONNX.  One easy\nway to get these dependencies is via\n[Anaconda](https://www.anaconda.com/download/):\n\n```\n# Use conda-forge protobuf, as default doesn't come with protoc\nconda install -c conda-forge protobuf numpy\n```\n\nYou can then install ONNX from PyPi (Note: Set environment variable `ONNX_ML=1` for onnx-ml):\n\n```\npip install onnx\n```\n\nYou can also build and install ONNX locally from source code:\n\n```\ngit clone https://github.com/onnx/onnx.git\ncd onnx\ngit submodule update --init --recursive\npython setup.py install\n```\n\nNote: When installing in a non-Anaconda environment, make sure to install the Protobuf compiler before running the pip installation of onnx. For example, on Ubuntu:\n\n```\nsudo apt-get install protobuf-compiler libprotoc-dev\npip install onnx\n```\n\n### Windows\nWhen building on Windows it is highly recommended that you also build protobuf locally as a static library. The version distributed with conda-forge is a DLL and this is a conflict as ONNX expects it to be a static lib.\n\n#### Instructions to build protobuf and ONNX on windows\nStep 1 : Build protobuf locally\n```\ngit clone https://github.com/protocolbuffers/protobuf.git\ncd protobuf\ngit checkout 3.9.x\ncd cmake\n# Explicitly set -Dprotobuf_MSVC_STATIC_RUNTIME=OFF to make sure protobuf does not statically link to runtime library\ncmake -G \"Visual Studio 15 2017 Win64\" -Dprotobuf_MSVC_STATIC_RUNTIME=OFF -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_BUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=<protobuf_install_dir>\nmsbuild protobuf.sln /m /p:Configuration=Release\nmsbuild INSTALL.vcxproj /p:Configuration=Release\n```\n\nStep 2: Build ONNX\n```\n# Get ONNX\ngit clone https://github.com/onnx/onnx.git\ncd onnx\ngit submodule update --init --recursive\n\n# Set environment variables to find protobuf and turn off static linking of ONNX to runtime library.\n# Even better option is to add it to user\\system PATH so this step can be performed only once.\n# For more details check https://docs.microsoft.com/en-us/cpp/build/reference/md-mt-ld-use-run-time-library?view=vs-2017\nset PATH=<protobuf_install_dir>\\bin;%PATH%\nset USE_MSVC_STATIC_RUNTIME=0\n\n# Optional : Set environment variable `ONNX_ML=1` for onnx-ml\n\n# Build ONNX\npython setup.py install\n```\n\nIf you do not want to build protobuf and instead want to use protobuf from conda forge then follow these instructions. \nHowever please note : This method is just added as a convenience for users and there is very limited support from ONNX team when using this method.\n\n#### Instructions to build ONNX on windows in anaconda environment\n\n```\n# Use conda-forge protobuf\nconda install -c conda-forge protobuf=3.9.2 numpy\n\n# Get ONNX\ngit clone https://github.com/onnx/onnx.git\ncd onnx\ngit submodule update --init --recursive\n\n# Set environment variable for ONNX to use protobuf shared lib\nset CMAKE_ARGS=\"-DONNX_USE_PROTOBUF_SHARED_LIBS=ON\"\n\n# Build ONNX\n# Optional : Set environment variable `ONNX_ML=1` for onnx-ml\n\npython setup.py install\n```\n\n## Verify Installation\nAfter installation, run\n\n```\npython -c \"import onnx\"\n```\n\nto verify it works.  Note that this command does not work from\na source checkout directory; in this case you'll see:\n\n```\nModuleNotFoundError: No module named 'onnx.onnx_cpp2py_export'\n```\n\nChange into another directory to fix this error.\n\n# Testing\n\nONNX uses [pytest](https://docs.pytest.org) as test driver. In order to run tests, first you need to install pytest:\n\n```\npip install pytest nbval\n```\n\nAfter installing pytest, do\n\n```\npytest\n```\n\nto run tests.\n\n# Development\n\nCheck out [contributor guide](https://github.com/onnx/onnx/blob/master/docs/CONTRIBUTING.md) for instructions.\n\n# License\n\n[MIT License](LICENSE)\n\n# Code of Conduct\n\n[ONNX Open Source Code of Conduct](https://onnx.ai/codeofconduct.html)\n"}}}