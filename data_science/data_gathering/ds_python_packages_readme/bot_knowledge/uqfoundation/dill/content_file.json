{"results": {"content_files": {"name": "README.md", "path": "README.md", "content": "dill\n====\nserialize all of python\n\nAbout Dill\n----------\n``dill`` extends python's ``pickle`` module for serializing and de-serializing\npython objects to the majority of the built-in python types. Serialization\nis the process of converting an object to a byte stream, and the inverse\nof which is converting a byte stream back to on python object hierarchy.\n\n``dill`` provides the user the same interface as the ``pickle`` module, and\nalso includes some additional features. In addition to pickling python\nobjects, ``dill`` provides the ability to save the state of an interpreter\nsession in a single command.  Hence, it would be feasable to save a\ninterpreter session, close the interpreter, ship the pickled file to\nanother computer, open a new interpreter, unpickle the session and\nthus continue from the 'saved' state of the original interpreter\nsession.\n\n``dill`` can be used to store python objects to a file, but the primary\nusage is to send python objects across the network as a byte stream.\n``dill`` is quite flexible, and allows arbitrary user defined classes\nand functions to be serialized.  Thus ``dill`` is not intended to be\nsecure against erroneously or maliciously constructed data. It is\nleft to the user to decide whether the data they unpickle is from\na trustworthy source.\n\n``dill`` is part of ``pathos``, a python framework for heterogeneous computing.\n``dill`` is in active development, so any user feedback, bug reports, comments,\nor suggestions are highly appreciated.  A list of known issues is maintained\nat http://trac.mystic.cacr.caltech.edu/project/pathos/query.html, with a public\nticket list at https://github.com/uqfoundation/dill/issues.\n\n\nMajor Features\n--------------\n``dill`` can pickle the following standard types:\n\n* none, type, bool, int, long, float, complex, str, unicode,\n* tuple, list, dict, file, buffer, builtin,\n* both old and new style classes,\n* instances of old and new style classes,\n* set, frozenset, array, functions, exceptions\n\n``dill`` can also pickle more 'exotic' standard types:\n\n* functions with yields, nested functions, lambdas\n* cell, method, unboundmethod, module, code, methodwrapper,\n* dictproxy, methoddescriptor, getsetdescriptor, memberdescriptor,\n* wrapperdescriptor, xrange, slice,\n* notimplemented, ellipsis, quit\n\n``dill`` cannot yet pickle these standard types:\n\n* frame, generator, traceback\n\n``dill`` also provides the capability to:\n\n* save and load python interpreter sessions\n* save and extract the source code from functions and classes\n* interactively diagnose pickling errors\n\n\nCurrent Release\n---------------\nThe latest released version of ``dill`` is available from:\n    https://pypi.org/project/dill\n\n``dill`` is distributed under a 3-clause BSD license.\n\n\nDevelopment Version\n[![Documentation Status](https://readthedocs.org/projects/dill/badge/?version=latest)](https://dill.readthedocs.io/en/latest/?badge=latest)\n[![Travis Build Status](https://img.shields.io/travis/uqfoundation/dill.svg?label=build&logo=travis&branch=master)](https://travis-ci.org/uqfoundation/dill)\n[![codecov](https://codecov.io/gh/uqfoundation/dill/branch/master/graph/badge.svg)](https://codecov.io/gh/uqfoundation/dill)\n-------------------\nYou can get the latest development version with all the shiny new features at:\n    https://github.com/uqfoundation\n\nIf you have a new contribution, please submit a pull request.\n\n\nMore Information\n----------------\nProbably the best way to get started is to look at the documentation at\nhttp://dill.rtfd.io. Also see ``dill.tests`` for a set of scripts that\ndemonstrate how ``dill`` can serialize different python objects. You can\nrun the test suite with ``python -m dill.tests``. The contents of any\npickle file can be examined with ``undill``.  As ``dill`` conforms to\nthe ``pickle`` interface, the examples and documentation found at\nhttp://docs.python.org/library/pickle.html also apply to ``dill``\nif one will ``import dill as pickle``. The source code is also generally\nwell documented, so further questions may be resolved by inspecting the\ncode itself. Please feel free to submit a ticket on github, or ask a\nquestion on stackoverflow (**@Mike McKerns**).\nIf you would like to share how you use ``dill`` in your work, please send\nan email (to **mmckerns at uqfoundation dot org**).\n\n\nCitation\n--------\nIf you use ``dill`` to do research that leads to publication, we ask that you\nacknowledge use of ``dill`` by citing the following in your publication::\n\n    M.M. McKerns, L. Strand, T. Sullivan, A. Fang, M.A.G. Aivazis,\n    \"Building a framework for predictive science\", Proceedings of\n    the 10th Python in Science Conference, 2011;\n    http://arxiv.org/pdf/1202.1056\n\n    Michael McKerns and Michael Aivazis,\n    \"pathos: a framework for heterogeneous computing\", 2010- ;\n    http://trac.mystic.cacr.caltech.edu/project/pathos\n\nPlease see http://trac.mystic.cacr.caltech.edu/project/pathos or\nhttp://arxiv.org/pdf/1202.1056 for further information.\n\n"}}}