{"results": {"content_files": {"name": "README.md", "path": "README.md", "content": "[![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Title.png)](https://github.com/man-group/dtale)\n\n* [Live Demo](http://alphatechadmin.pythonanywhere.com)\n* [Animated US COVID-19 Deaths By State](http://alphatechadmin.pythonanywhere.com/charts/3?chart_type=maps&query=date+%3E+%2720200301%27&agg=raw&map_type=choropleth&loc_mode=USA-states&loc=state_code&map_val=deaths&colorscale=Reds&cpg=false&animate_by=date)\n* [3D Scatter Chart](http://alphatechadmin.pythonanywhere.com/charts/4?chart_type=3d_scatter&query=&x=date&z=Col0&agg=raw&cpg=false&y=%5B%22security_id%22%5D)\n* [Surface Chart](http://alphatechadmin.pythonanywhere.com/charts/4?chart_type=surface&query=&x=date&z=Col0&agg=raw&cpg=false&y=%5B%22security_id%22%5D)\n\n-----------------\n\n[![CircleCI](https://circleci.com/gh/man-group/dtale.svg?style=shield&circle-token=4b67588a87157cc03b484fb96be438f70b5cd151)](https://circleci.com/gh/man-group/dtale)\n[![PyPI](https://img.shields.io/pypi/pyversions/dtale.svg)](https://pypi.python.org/pypi/dtale/)\n[![ReadTheDocs](https://readthedocs.org/projects/dtale/badge)](https://dtale.readthedocs.io)\n[![codecov](https://codecov.io/gh/man-group/dtale/branch/master/graph/badge.svg)](https://codecov.io/gh/man-group/dtale)\n[![Downloads](https://pepy.tech/badge/dtale)](https://pepy.tech/project/dtale)\n\n## What is it?\n\nD-Tale is the combination of a Flask back-end and a React front-end to bring you an easy way to view & analyze Pandas data structures.  It integrates seamlessly with ipython notebooks & python/ipython terminals.  Currently this tool supports such Pandas objects as DataFrame, Series, MultiIndex, DatetimeIndex & RangeIndex.\n\n## Origins\n\nD-Tale was the product of a SAS to Python conversion.  What was originally a perl script wrapper on top of SAS's `insight` function is now a lightweight web client on top of Pandas data structures.\n\n## In The News\n - [Man Institute](https://www.man.com/maninstitute/d-tale) (warning: contains deprecated functionality)\n - [Python Bytes](https://pythonbytes.fm/episodes/show/169/jupyter-notebooks-natively-on-your-ipad)\n - [towards data science](https://towardsdatascience.com/introduction-to-d-tale-5eddd81abe3f)\n\n\n## Tutorials\n - [Pip Install Python YouTube Channel](https://m.youtube.com/watch?v=0RihZNdQc7k&feature=youtu.be)\n - [machine_learning_2019](https://www.youtube.com/watch?v=-egtEUVBy9c)\n\n## Contents\n\n- [Getting Started](#getting-started)\n  - [Python Terminal](#python-terminal)\n  - [Jupyter Notebook](#jupyter-notebook)\n  - [Jupyterhub w/ Kubernetes](https://github.com/man-group/dtale/blob/master/docs/JUPYTERHUB_KUBERNETES.md)\n  - [Google Colab & Kaggle](#google-colab--kaggle)\n  - [R with Reticulate](#r-with-reticulate)\n  - [Command-line](#command-line)\n- [UI](#ui)\n  - [Dimensions/Main Menu](#dimensionsmain-menu)\n  - [Header](#header)\n  - [Main Menu Functions](#main-menu-functions)\n    - [Describe](#describe), [Outlier Detection](#outlier-detection), [Custom Filter](#custom-filter), [Building Columns](#building-columns), [Summarize Data](#summarize-data), [Charts](#charts), [Coverage (Deprecated)](#coverage-deprecated), [Correlations](#correlations), [Heat Map](#heat-map), [Highlight Dtypes](#highlight-dtypes), [Instances](#instances), [Code Exports](#code-exports), [About](#about), [Resize](#resize), [Shutdown](#shutdown)\n  - [Column Menu Functions](#column-menu-functions)\n    - [Filtering](#filtering), [Moving Columns](#moving-columns), [Hiding Columns](#hiding-columns), [Delete](#delete), [Lock](#lock), [Unlock](#unlock), [Sorting](#sorting), [Formats](#formats), [Column Analysis](#column-analysis)\n  - [Menu Functions Depending on Browser Dimensions](#menu-functions-depending-on-browser-dimensions)\n- [For Developers](#for-developers)\n  - [Cloning](#cloning)\n  - [Running Tests](#running-tests)\n  - [Linting](#linting)\n  - [Formatting JS](#formatting-js)\n  - [Docker Development](#docker-development)\n- [Global State/Data Storage](https://github.com/man-group/dtale/blob/master/docs/GLOBAL_STATE.md)\n- [Startup Behavior](#startup-behavior)\n- [Documentation](#documentation)\n- [Requirements](#requirements)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n## Getting Started\n\n|PyCharm|jupyter|\n|:------:|:------:|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/gifs/dtale_demo_mini.gif)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/gifs/dtale_ipython.gif)|\n\nInstalling the egg\n\n```bash\n# install dtale egg (important to use the \"--upgrade\" every time you install so it will grab the latest version)\n$ pip install --upgrade dtale\n```\nNow you will have the ability to use D-Tale from the command-line or within a python-enabled terminal\n\n### Python Terminal\nThis comes courtesy of PyCharm\n![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Python_Terminal.png)\nFeel free to invoke `python` or `ipython` directly and use the commands in the screenshot above and it should work\n\n#### Issues With Windows Firewall\n\nIf you run into issues with viewing D-Tale in your browser on Windows please try making Python public under \"Allowed Apps\" in your Firewall configuration.  Here is a nice article:\n[How to Allow Apps to Communicate Through the Windows Firewall](https://www.howtogeek.com/howto/uncategorized/how-to-create-exceptions-in-windows-vista-firewall/)\n\n#### Additional functions available programatically\n```python\nimport dtale\nimport pandas as pd\n\ndf = pd.DataFrame([dict(a=1,b=2,c=3)])\n\n# Assigning a reference to a running D-Tale process\nd = dtale.show(df)\n\n# Accessing data associated with D-Tale process\ntmp = d.data.copy()\ntmp['d'] = 4\n\n# Altering data associated with D-Tale process\n# FYI: this will clear any front-end settings you have at the time for this process (filter, sorts, formatting)\nd.data = tmp\n\n# Shutting down D-Tale process\nd.kill()\n\n# using Python's `webbrowser` package it will try and open your server's default browser to this process\nd.open_browser()\n\n# There is also some helpful metadata about the process\nd._data_id  # the process's data identifier\nd._url  # the url to access the process\n\nd2 = dtale.get_instance(d._data_id)  # returns a new reference to the instance running at that data_id\n\ndtale.instances()  # prints a list of all ids & urls of running D-Tale sessions\n\n```\n\n#### Duplicate data check\nTo help guard against users loading the same data to D-Tale multiple times and thus eating up precious memory, we have a loose check for duplicate input data.  The check runs the following:\n * Are row & column count the same as a previously loaded piece of data?\n * Are the names and order of columns the same as a previously loaded piece of data?\n\nIf both these conditions are true then you will be presented with an error and a link to the previously loaded data.  Here is an example of how the interaction looks:\n![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Duplicate_data.png)\n\n\n### Jupyter Notebook\nWithin any jupyter (ipython) notebook executing a cell like this will display a small instance of D-Tale in the output cell.  Here are some examples:\n\n|`dtale.show`|assignment|instance|\n|:------:|:------:|:------:|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/ipython1.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/ipython2.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/ipython3.png)|\n\nIf you are running ipython<=5.0 then you also have the ability to adjust the size of your output cell for the most recent instance displayed:\n\n![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/ipython_adjust.png)\n\nOne thing of note is that a lot of the modal popups you see in the standard browser version will now open separate browser windows for spacial convienence:\n\n|Column Menus|Correlations|Describe|Column Analysis|Instances|\n|:------:|:------:|:------:|:------:|:------:|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Column_menu.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/correlations_popup.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/describe_popup.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/histogram_popup.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/instances_popup.png)|\n\n### JupyterHub w/ Kubernetes\n\nPlease read this [post](https://github.com/man-group/dtale/blob/master/docs/JUPYTERHUB_KUBERNETES.md)\n\n### Google Colab & Kaggle\n\nThese are hosted notebook sites and thanks to the work of [flask_ngrok](https://github.com/gstaff/flask-ngrok) users can run D-Tale within their notebooks.\n\n**DISCLAIMER:** It is import that you set `USE_NGROK` to true when using D-Tale within these two services.  Here is an example:\n\n```\nimport pandas as pd\n\nimport dtale\nimport dtale.app as dtale_app\n\ndtale_app.USE_NGROK = True\n\ndtale.show(pd.DataFrame([1,2,3]))\n```\n\nHere are some video tutorials of each:\n\n|Service|Tutorial|Addtl Notes|\n|:------:|:------:|:------:|\n|Google Colab|[![](http://img.youtube.com/vi/pOYl2M1clIw/0.jpg)](http://www.youtube.com/watch?v=pOYl2M1clIw \"Google Colab\")||\n|Kaggle|[![](http://img.youtube.com/vi/8Il-2HHs2Mg/0.jpg)](http://www.youtube.com/watch?v=8Il-2HHs2Mg \"Kaggle\")|make sure you switch the \"Internet\" toggle to \"On\" under settings of your notebook so you can install the egg from pip|\n\n### R with Reticulate\n\nI was able to get D-Tale running in R using reticulate. Here is an example:\n\n```\nlibrary('reticulate')\ndtale <- import('dtale')\ndf <- read.csv('https://vincentarelbundock.github.io/Rdatasets/csv/boot/acme.csv')\ndtale$show(df, subprocess=FALSE, open_browser=TRUE)\n```\n\nNow the problem with doing this is that D-Tale is not running as a subprocess so it will block your R console and you'll lose out the following functions:\n - manipulating the state of your data from your R console\n - adding more data to D-Tale\n\n`open_browser=TRUE` isn't required and won't work if you don't have a default browser installed on your machine. If you don't use that parameter simply copy & paste the URL that gets printed to your console in the browser of your choice.\n\nI'm going to do some more digging on why R doesn't seem to like using python subprocesses (not sure if it something with how reticulate manages the state of python) and post any findings to this thread.\n\nHere's some helpful links for getting setup:\n\nreticulate\n\ninstalling python packages\n\n### Command-line\nBase CLI options (run `dtale --help` to see all options available)\n\n|Prop     |Description|\n|:--------|:-----------|\n|`--host` |the name of the host you would like to use (most likely not needed since `socket.gethostname()` should figure this out)|\n|`--port` |the port you would like to assign to your D-Tale instance|\n|`--name` |an optional name you can assign to your D-Tale instance (this will be displayed in the `<title>` & Instances popup)|\n|`--debug`|turn on Flask's \"debug\" mode for your D-Tale instance|\n|`--no-reaper`|flag to turn off auto-reaping subprocess (kill D-Tale instances after an hour of inactivity), good for long-running displays |\n|`--open-browser`|flag to automatically open up your server's default browser to your D-Tale instance|\n|`--force`|flag to force D-Tale to try an kill any pre-existing process at the port you've specified so it can use it|\n\nLoading data from [**arctic**(high performance datastore for pandas dataframes)](https://github.com/man-group/arctic) (this requires either installing **arctic** or **dtale[arctic]**)\n```bash\ndtale --arctic-host mongodb://localhost:27027 --arctic-library jdoe.my_lib --arctic-node my_node --arctic-start 20130101 --arctic-end 20161231\n```\nLoading data from **CSV**\n```bash\ndtale --csv-path /home/jdoe/my_csv.csv --csv-parse_dates date\n```\nLoading data from **JSON**\n```bash\ndtale --json-path /home/jdoe/my_json.json --json-parse_dates date\n```\nor\n```bash\ndtale --json-path http://json-endpoint --json-parse_dates date\n```\nLoading data from a **Custom** loader\n- Using the DTALE_CLI_LOADERS environment variable, specify a path to a location containing some python modules\n- Any python module containing the global variables LOADER_KEY & LOADER_PROPS will be picked up as a custom loader\n  - LOADER_KEY: the key that will be associated with your loader.  By default you are given **arctic** & **csv** (if you use one of these are your key it will override these)\n  - LOADER_PROPS: the individual props available to be specified.\n    - For example, with arctic we have host, library, node, start & end.\n    - If you leave this property as an empty list your loader will be treated as a flag.  For example, instead of using all the arctic properties we would simply specify `--arctic` (this wouldn't work well in arctic's case since it depends on all those properties)\n- You will also need to specify a function with the following signature `def find_loader(kwargs)` which returns a function that returns a dataframe or `None`\n- Here is an example of a custom loader:\n```python\nfrom dtale.cli.clickutils import get_loader_options\n\n'''\n  IMPORTANT!!! This global variable is required for building any customized CLI loader.\n  When find loaders on startup it will search for any modules containing the global variable LOADER_KEY.\n'''\nLOADER_KEY = 'testdata'\nLOADER_PROPS = ['rows', 'columns']\n\n\ndef test_data(rows, columns):\n    import pandas as pd\n    import numpy as np\n    import random\n    from past.utils import old_div\n    from pandas.tseries.offsets import Day\n    from dtale.utils import dict_merge\n    import string\n\n    now = pd.Timestamp(pd.Timestamp('now').date())\n    dates = pd.date_range(now - Day(364), now)\n    num_of_securities = max(old_div(rows, len(dates)), 1)  # always have at least one security\n    securities = [\n        dict(security_id=100000 + sec_id, int_val=random.randint(1, 100000000000),\n             str_val=random.choice(string.ascii_letters) * 5)\n        for sec_id in range(num_of_securities)\n    ]\n    data = pd.concat([\n        pd.DataFrame([dict_merge(dict(date=date), sd) for sd in securities])\n        for date in dates\n    ], ignore_index=True)[['date', 'security_id', 'int_val', 'str_val']]\n\n    col_names = ['Col{}'.format(c) for c in range(columns)]\n    return pd.concat([data, pd.DataFrame(np.random.randn(len(data), columns), columns=col_names)], axis=1)\n\n\n# IMPORTANT!!! This function is required for building any customized CLI loader.\ndef find_loader(kwargs):\n    test_data_opts = get_loader_options(LOADER_KEY, kwargs)\n    if len([f for f in test_data_opts.values() if f]):\n        def _testdata_loader():\n            return test_data(int(test_data_opts.get('rows', 1000500)), int(test_data_opts.get('columns', 96)))\n\n        return _testdata_loader\n    return None\n```\nIn this example we simplying building a dataframe with some dummy data based on dimensions specified on the command-line:\n- `--testdata-rows`\n- `--testdata-columns`\n\nHere's how you would use this loader:\n```bash\nDTALE_CLI_LOADERS=./path_to_loaders bash -c 'dtale --testdata-rows 10 --testdata-columns 5'\n```\n\n### Accessing CLI Loaders in Notebook or Console\nI am pleased to announce that all CLI loaders will be available within notebooks & consoles.  Here are some examples:\n- `dtale.show_csv(path='test.csv', parse_dates=['date'])`\n- `dtale.show_json(path='http://json-endpoint', parse_dates=['date'])`\n- `dtale.show_json(path='test.json', parse_dates=['date'])`\n- `dtale.show_arctic(host='host', library='library', node='node', start_date='20200101', end_date='20200101')`\n\n## UI\nOnce you have kicked off your D-Tale session please copy & paste the link on the last line of output in your browser\n![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Browser1.png)\n\n### Dimensions/Main Menu\nThe information in the upper right-hand corner gives grid dimensions ![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Info_cell.png)\n- lower-left => row count\n- upper-right => column count\n- clicking the triangle displays the menu of standard functions (click outside menu to close it)\n![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Info_menu_small.png)\n\n### Header\n\nThe header gives users an idea of what operations have taken place on your data (sorts, filters, hidden columns).  These values will be persisted across broswer instances.  So if you perform one of these operations and then send a link to one of your colleagues they will see the same thing :)\n\nNotice the \"X\" icon on the right of each display.  Clicking this will remove those operations.\n\nWhen performing multiple of the same operation the description will become too large to display so the display will truncate the description and if users click it they will be presented with a tooltip where you can crop individual operations.  Here are some examples:\n\n|Sorts|Filters|Hidden Columns|\n|-----|-------|--------------|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/header/sorts.PNG)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/header/filters.PNG)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/header/hidden.PNG)|\n\n### Main Menu Functions\n\n#### Describe\nView all the columns & their data types as well as individual details of each column\n\n![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe.png)\n\n|Data Type|Display|Notes|\n|--------|:------:|:------:|\n|date|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe_date.png)||\n|string|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe_string.png)|If you have less than or equal to 100 unique values they will be displayed at the bottom of your popup|\n|int|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe_int.png)|Anything with standard numeric classifications (min, max, 25%, 50%, 75%) will have a nice boxplot with the mean (if it exists) displayed as an outlier if you look closely.|\n|float|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Describe_float.png)||\n\n#### Outlier Detection\nWhen viewing integer & float columns in the [\"Describe\" popup](#describe) you will see in the lower right-hand corner a toggle for Uniques & Outliers.\n\n|Outliers|Filter|\n|--------|------|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/outliers.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/outlier_filter.png)|\n\nIf you click the \"Outliers\" toggle this will load the top 100 outliers in your column based on the following code snippet:\n```python\ns = df[column]\nq1 = s.quantile(0.25)\nq3 = s.quantile(0.75)\niqr = q3 - q1\niqr_lower = q1 - 1.5 * iqr\niqr_upper = q3 + 1.5 * iqr\noutliers = s[(s < iqr_lower) | (s > iqr_upper)]\n```\nIf you click on the \"Apply outlier filter\" link this will add an addtional \"outlier\" filter for this column which can be removed from the [header](#header) or the [custom filter](#custom-filter) shown in picture above to the right.\n\n#### Custom Filter\nApply a custom pandas `query` to your data (link to pandas documentation included in popup)  \n\n|Editing|Result|\n|--------|:------:|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Filter_apply.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Post_filter.png)|\n\nYou can also see any outlier or column filters you've applied (which will be included in addition to your custom query) and remove them if you'd like.\n\nContext Variables are user-defined values passed in via the `context_variables` argument to dtale.show(); they can be referenced in filters by prefixing the variable name with '@'.\n\nFor example, here is how you can use context variables in a pandas query:\n```python\nimport pandas as pd\n\ndf = pd.DataFrame([\n  dict(name='Joe', age=7),\n  dict(name='Bob', age=23),\n  dict(name='Ann', age=45),\n  dict(name='Cat', age=88),\n])\ntwo_oldest_ages = df['age'].nlargest(2)\ndf.query('age in @two_oldest_ages')\n```\nAnd here is how you would pass that context variable to D-Tale: `dtale.show(df, context_variables=dict(two_oldest_ages=two_oldest_ages))`\n\nHere's some nice documentation on the performance of [pandas queries](https://pandas.pydata.org/pandas-docs/stable/user_guide/enhancingperf.html#pandas-eval-performance)\n\n#### Building Columns\n\n[![](http://img.youtube.com/vi/G6wNS9-lG04/0.jpg)](http://www.youtube.com/watch?v=G6wNS9-lG04 \"Build Columns in D-Tale\")\n\nThis video shows you how to build the following:\n - Numeric: adding/subtracting two columns or columns with static values\n - Bins: bucketing values using pandas cut & qcut as well as assigning custom labels\n - Dates: retrieving date properties (hour, weekday, month...) as well as conversions (month end)\n - Random: columns of data type (int, float, string & date) populated with random uniformly distributed values.\n  - Type Conversion: switch columns from one data type to another, fun. :smile:\n\n#### Summarize Data\n\nThis is very powerful functionality which allows users to create a new data from currently loaded data.  The operations currently available are:\n- **Aggregation**: consolidate data by running different aggregations on columns by a specific index\n- **Pivot**: this is simple wrapper around [pandas.Dataframe.pivot](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html) and [pandas.pivot_table](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html)\n- **Transpose**: transpose your data on a index (be careful dataframes can get very wide if your index has many unique values)\n\n|Function|Data|\n|:------:|:------:|\n|No Reshaping|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/original_data.png)|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/agg_col.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/agg_col_data.png)|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/agg_func.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/agg_func_data.png)|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/pivot.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/pivot_data.png)|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/transpose.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/reshape/transpose_data.png)|\n\n[![](http://img.youtube.com/vi/fYsxogXKZ2c/0.jpg)](http://www.youtube.com/watch?v=fYsxogXKZ2c \"Reshaping Tutorial\")\n\n#### Charts\nBuild custom charts based off your data(powered by [plotly/dash](https://github.com/plotly/dash)).\n \n - The Charts will open in a tab because of the fact there is so much functionality offered there you'll probably want to be able to reference the main grid data in the original tab\n - To build a chart you must pick a value for X & Y inputs which effectively drive what data is along the X & Y axes\n   - If you are working with a 3-Dimensional chart (heatmap, 3D Scatter, Surface) you'll need to enter a value for the Z axis as well\n - Once you have entered all the required axes a chart will be built\n - If your data along the x-axis (or combination of x & y in the case of 3D charts) has duplicates you have three options:\n   - Specify a group, which will create series for each group\n   - Specify an aggregation, you can choose from one of the following: Count, First, Last, Mean, Median, Minimum, Maximum, Standard Deviation, Variance, Mean Absolute Deviation, Product of All Items, Sum, Rolling\n     - Specifying a \"Rolling\" aggregation will also require a Window & a Computation (Correlation, Count, Covariance, Kurtosis, Maximum, Mean, Median, Minimum, Skew, Standard Deviation, Sum or Variance)\n     - For heatmaps you will also have access to the \"Correlation\" aggregation since viewing correlation matrices in heatmaps is very useful.  This aggregation is not supported elsewhere\n   - Specify both a group & an aggregation\n - You now have the ability to toggle between different chart types: line, bar, pie, wordcloud, heatmap, 3D scatter & surface\n - If you have specified a group then you have the ability between showing all series in one chart and breaking each series out into its own chart \"Chart per Group\"\n\nHere are some examples:\n\n|Chart Type|Chart|Chart per Group|\n|:------:|:------:|:------:|\n|line|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/line.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/line_pg.png)|\n|bar|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/bar.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/bar_pg.png)|\n|stacked|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/stacked.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/stacked_pg.png)|\n|pie|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/pie.png)||\n|wordcloud|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/wordcloud.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/wordcloud_pg.png)|\n|heatmap|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/heatmap.png)||\n|3D scatter|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/3d_scatter.png)||\n|surface|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/surface.png)||\n|Maps (Scatter GEO)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/scattergeo.png)||\n|Maps (Choropleth)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/choropleth.png)||\n\nY-Axis Toggling\n\nUsers now have the ability to toggle between 3 different behaviors for their y-axis display:\n- *Default*: selecting this option will use the default behavior that comes with plotly for your chart's y-axis\n- *Single*: this allows users to set the range of all series in your chart to be on the same basis as well as making that basis (min/max) editable\n- *Multi*: this allows users to give each series its own y-axis and making that axis' range editable\n\nHere's a quick tutorial: [![](http://img.youtube.com/vi/asblF-rAACY/0.jpg)](http://www.youtube.com/watch?v=asblF-rAACY \"Y-Axis Toggling\")\n\nAnd some screenshots:\n\n|Default|Single|Multi|\n|:------:|:------:|:------:|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/axis_toggle/default.PNG)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/axis_toggle/single.PNG)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/axis_toggle/multi.PNG)|\n\nWith a bar chart that only has a single Y-Axis you have the ability to sort the bars based on the values for the Y-Axis\n\n|Pre-sort|Post-sort|\n|:------:|:------:|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/bar_presort.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/charts/bar_postsort.png)|\n\n**Popup Charts**\n\nViewing multiple charts at once and want to separate one out into its own window or simply move one off to the side so you can work on building another for comparison?  Well now you can by clicking the \"Popup\" button :smile:\n\n**Copy Link**\n\nWant to send what you're looking at to someone else?  Simply click the \"Copy Link\" button and it will save a pre-populated chart URL into your clipboard. As long as your D-Tale process is still running when that link is opened you will see your original chart.\n\n**Exporting Charts**\n\nYou can now export your dash charts (with the exception of Wordclouds) to static HTML files which can be emailed to others or saved down to be viewed at a later time.  The best part is that all of the javascript for plotly is embedded in these files so the nice zooming, panning, etc is still available! :boom:\n\n**Exporting CSV**\n\nI've been asked about being able to export the data that is contained within your chart to a CSV for further analysis in tools like Excel.  This button makes that possible.\n\n**OFFLINE CHARTS**\n\nWant to run D-Tale in a jupyter notebook and build a chart that will still be displayed even after your D-Tale process has shutdown?  Now you can!  Here's an example code snippet show how to use it:\n\n```\nimport dtale\n\ndef test_data():\n    import random\n    import pandas as pd\n    import numpy as np\n\n    df = pd.DataFrame([\n        dict(x=i, y=i % 2)\n        for i in range(30)\n    ])\n    rand_data = pd.DataFrame(np.random.randn(len(df), 5), columns=['z{}'.format(j) for j in range(5)])\n    return pd.concat([df, rand_data], axis=1)\n\nd = dtale.show(test_data())\nd.offline_chart(chart_type='bar', x='x', y='z3', agg='sum')\n```\n[![](http://img.youtube.com/vi/DseSmc3fZvc/0.jpg)](http://www.youtube.com/watch?v=DseSmc3fZvc \"Offline Charts Tutorial\")\n\n**Pro Tip: If generating offline charts in jupyter notebooks and you run out of memory please add the following to your command-line when starting jupyter**\n\n`--NotebookApp.iopub_data_rate_limit=1.0e10`\n\n\n**Disclaimer: Long Running Chart Requests**\n\nIf you choose to build a chart that requires a lot of computational resources then it will take some time to run.  Based on the way Flask & plotly/dash interact this will block you from performing any other request until it completes.  There are two courses of action in this situation:\n\n1) Restart your jupyter notebook kernel or python console\n2) Open a new D-Tale session on a different port than the current session.  You can do that with the following command: `dtale.show(df, port=[any open port], force=True)`\n\nIf you miss the legacy (non-plotly/dash) charts, not to worry!  They are still available from the link in the upper-right corner, but on for a limited time...\nHere is the documentation for those: [Legacy Charts](https://github.com/man-group/dtale/blob/master/docs/LEGACY_CHARTS.md)\n\n**Your Feedback is Valuable**\n\nThis is a very powerful feature with many more features that could be offered (linked subplots, different statistical aggregations, etc...) so please submit issues :)\n\n#### Coverage (Deprecated)\n\nIf you have watched the video within the [Man Institute](https://www.man.com/maninstitute/d-tale) blog post you'll notice that there is a \"Coverage\" popup.  This was deprecated with the creation of the \"Charts\" page.  You can create the same coverage chart in that video by choosing the following options in the \"Charts\" page:\n- Type: **Line**\n- X: **date**\n- Y: **security_id**\n- Aggregation: **Count** or **Unique Count**\n\n#### Correlations\nShows a pearson correlation matrix of all numeric columns against all other numeric columns\n  - By default, it will show a grid of pearson correlations (filtering available by using drop-down see 2nd table of screenshots)\n  - If you have a date-type column, you can click an individual cell and see a timeseries of pearson correlations for that column combination\n    - Currently if you have multiple date-type columns you will have the ability to toggle between them by way of a drop-down\n  - Furthermore, you can click on individual points in the timeseries to view the scatter plot of the points going into that correlation\n\n|Matrix|Timeseries|Scatter|\n|------|----------|-------|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_ts.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_scatter.png)|\n\n|Col1 Filtered|Col2 Filtered|Col1 & Col2 Filtered|\n|------|----------|-------|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_col1.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_col2.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Correlations_both.png)|\n\nWhen the data being viewed in D-Tale has date or timestamp columns but for each date/timestamp vlaue there is only one row of data the behavior of the Correlations popup is a little different\n  - Instead of a timeseries correlation chart the user is given a rolling correlation chart which can have the window (default: 10) altered\n  - The scatter chart will be created when a user clicks on a point in the rollign correlation chart.  The data displayed in the scatter will be for the ranges of dates involved in the rolling correlation for that date.\n\n|Data|Correlations|\n|:------:|:------:|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/rolling_corr_data.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/rolling_corr.png)|\n\n#### Heat Map\nThis will hide any non-float or non-int columns (with the exception of the index on the right) and apply a color to the background of each cell.\n\n  - Each float is renormalized to be a value between 0 and 1.0\n  - You have two options for the renormalization\n    - **By Col**: each value is calculated based on the min/max of its column\n    - **Overall**: each value is caluclated by the overall min/max of all the non-hidden float/int columns in the dataset\n  - Each renormalized value is passed to a color scale of red(0) - yellow(0.5) - green(1.0)\n![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Heatmap.png)\n\nTurn off Heat Map by clicking menu option you previously selected one more time\n\n#### Highlight Dtypes\nThis is a quick way to check and see if your data has been categorized correctly.  By clicking this menu option it will assign a specific background color to each column of a specific data type.\n\n|category|timedelta|float|int|date|string|bool|\n|:-------:|:-------:|:-------:|:-------:|:-------:|:-------:|:-------:|\n|purple|orange|green|light blue|pink|white|yellow\n\n![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/highlight_dtypes.png)\n\n\n#### Code Exports\n*Code Exports* are small snippets of code representing the current state of the grid you're viewing including things like:\n - columns built\n - filtering\n - sorting\n\nOther code exports available are:\n - Column Analysis\n - Correlations (grid, timeseries chart & scatter chart)\n - Describe\n - Charts built using the Chart Builder\n\n [![](http://img.youtube.com/vi/6CkKgpv3d6I/0.jpg)](http://www.youtube.com/watch?v=6CkKgpv3d6I \"Code Export Tutorial\")\n\n|Type|Code Export|\n|:------:|:------:|\n|Main Grid|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/main.png)|\n|Histogram|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/histogram.png)|\n|Describe|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/describe.png)|\n|Correlation Grid|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/main.png)|\n|Correlation Timeseries|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/corr_ts.png)|\n|Correlation Scatter|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/corr_scatter.png)|\n|Charts|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/code_export/charts.png)|\n\n\n#### Instances\nThis will give you information about other D-Tale instances are running under your current Python process.\n\nFor example, if you ran the following script:\n```python\nimport pandas as pd\nimport dtale\n\ndtale.show(pd.DataFrame([dict(foo=1, bar=2, biz=3, baz=4, snoopy_D_O_double_gizzle=5)]))\ndtale.show(pd.DataFrame([\n    dict(a=1, b=2, c=3, d=4),\n    dict(a=2, b=3, c=4, d=5),\n    dict(a=3, b=4, c=5, d=6),\n    dict(a=4, b=5, c=6, d=7)\n]))\ndtale.show(pd.DataFrame([range(6), range(6), range(6), range(6), range(6), range(6)]), name=\"foo\")\n```\nThis will make the **Instances** button available in all 3 of these D-Tale instances. Clicking that button while in the first instance invoked above will give you this popup:\n\n![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Instances.png)\n\nThe grid above contains the following information:\n  - Process: timestamp when the process was started along with the name (if specified in `dtale.show()`)\n  - Rows: number of rows\n  - Columns: number of columns\n  - Column Names: comma-separated string of column names (only first 30 characters, hover for full listing)\n  - Preview: this button is available any of the non-current instances.  Clicking this will bring up left-most 5X5 grid information for that instance\n  - The row highlighted in green signifys the current D-Tale instance\n  - Any other row can be clicked to switch to that D-Tale instance\n\nHere is an example of clicking the \"Preview\" button:\n\n![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Instances_preview.png)\n\n#### About\nThis will give you information about what version of D-Tale you're running as well as if its out of date to whats on PyPi.\n\n|Up To Date|Out Of Date|\n|--------|:------:|\n|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/About-up-to-date.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/About-out-of-date.png)|\n\n#### Resize\nMostly a fail-safe in the event that your columns are no longer lining up. Click this and should fix that\n\n#### Shutdown\nPretty self-explanatory, kills your D-Tale session (there is also an auto-kill process that will kill your D-Tale after an hour of inactivity)\n\n### Column Menu Functions\n\n![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Col_menu.png)\n\n#### Filtering\n\n[![](http://img.youtube.com/vi/8zo5ZiI1Yzo/0.jpg)](http://www.youtube.com/watch?v=8zo5ZiI1Yzo \"Column Filtering\")\n\nThese interactive filters come in 3 different types: String, Numeric & Date.  Note that you will still have the ability to apply custom filters from the \"Filter\" popup on the main menu, but it will get applied in addition to any column filters.\n\n|Type|Filter|Data Types|Features|\n|----|------|----------|--------|\n|String|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/filters/string.PNG)|strings & booleans|The ability to select multiple values based on what exists in the column. Notice the \"Show Missing Only\" toggle, this will only show up if your column has nan values|\n|Date|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/filters/dates.PNG)|dates|Specify a range of dates to filter on based on start & end inputs|\n|Numeric|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/filters/numeric.PNG)|ints & floats|For integers the \"=\" will be similar to strings where you can select multiple values based on what exists in the column.  You also have access to other operands: <,>,<=,>=,() - \"Range exclusve\", [] - \"Range inclusive\".|\n\n#### Moving Columns\n\n[![](http://img.youtube.com/vi/We4TH477rRs/0.jpg)](http://www.youtube.com/watch?v=We4TH477rRs \"Moving Columns in D-Tale\")\n\nAll column movements are saved on the server so refreshing your browser won't lose them :ok_hand:\n\n#### Hiding Columns\n\n[![](http://img.youtube.com/vi/ryZT2Lk_YaA/0.jpg)](http://www.youtube.com/watch?v=ryZT2Lk_YaA \"Hide/Unhide Columns in D-Tale\")\n\nAll column movements are saved on the server so refreshing your browser won't lose them :ok_hand:\n\n#### Delete\n\nAs simple as it sounds, click this button to delete this column from your dataframe.  (Warning: not un-doable!)\n\n#### Lock\nAdds your column to \"locked\" columns\n  - \"locked\" means that if you scroll horizontally these columns will stay pinned to the right-hand side\n  - this is handy when you want to keep track of which date or security_id you're looking at\n  - by default, any index columns on the data passed to D-Tale will be locked\n\n#### Unlock\nRemoved column from \"locked\" columns\n\n#### Sorting\nApplies/removes sorting (Ascending/Descending/Clear) to the column selected\n  \n*Important*: as you add sorts they sort added will be added to the end of the multi-sort.  For example:\n\n| Action        | Sort           |\n| ------------- |:--------------:|\n| click \"a\"     |                |\n| sort asc      | a (asc)        |\n| click \"b\"     | a (asc)        |\n| sort desc     | a (asc), b(desc)|\n| click \"a\"     | a (asc), b(desc)|\n| sort None     | b(desc)|\n| sort desc     | b(desc), a(desc)|\n| click \"X\" on sort display | |\n\n#### Formats\nApply simple formats to numeric values in your grid\n\n|Type|Editing|Result|\n|--------|:------:|:------:|\n|Numeric|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Formatting_apply.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Post_formatting.png)|\n|Date|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Formatting_date_apply.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Post_date_formatting.png)|\n|String|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Formatting_string_apply.png)|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/Post_string_formatting.png)|\n\nHere's a grid of all the formats available with -123456.789 as input:\n  \n| Format        | Output         |\n| ------------- |:--------------:|\n| Precision (6) | -123456.789000 |\n| Thousands Sep | -123,456.789   |\n| Abbreviate    | -123k          |\n| Exponent      | -1e+5          |\n| BPS           | -1234567890BPS |\n| Red Negatives | <span style=\"color: red;\">-123457</span>|\n\n#### Column Analysis\nBased on the data type of a column different charts will be shown.\n\n| Chart         | Data Types     | Sample |\n|---------------|----------------|--------|\n| Histogram     | Float, Int |![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/analysis/histogram.PNG)|\n| Value Counts  | Int, String, Bool, Date, Category|![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/analysis/value_counts.PNG)|\n| Category      | Float   |![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/analysis/category.PNG)|\n\n\n**Histogram** can be displayed in any number of bins (default: 20), simply type a new integer value in the bins input\n\n**Value Count** by default, show the top 100 values ranked by frequency.  If you would like to show the least frequent values simply make your number negative (-10 => 10 least frequent value)\n\n**Value Count w/ Ordinal** you can also apply an ordinal to your **Value Count** chart by selecting a column (of type int or float) and applying an aggregation (default: sum) to it (sum, mean, etc...) this column will be grouped by the column you're analyzing and the value produced by the aggregation will be used to sort your bars and also displayed in a line.  Here's an example:\n\n![](https://raw.githubusercontent.com/aschonfeld/dtale-media/master/images/analysis/value_counts_ordinal.PNG\n)\n\n**Category (Category Breakdown)** when viewing float columns you can also see them broken down by a categorical column (string, date, int, etc...).  This means that when you select a category column this will then display the frequency of each category in a line as well as bars based on the float column you're analyzing grouped by that category and computed by your aggregation (default: mean).\n\n### Menu Functions Depending on Browser Dimensions\nDepending on the dimensions of your browser window the following buttons will not open modals, but rather separate browser windows:  Correlations, Describe & Instances (see images from [Jupyter Notebook](#jupyter-notebook), also Charts will always open in a separate browser window)\n\n## For Developers\n\n### Cloning\n\nClone the code (git clone ssh://git@github.com:manahl/dtale.git), then start the backend server:\n\n```bash\n$ git clone ssh://git@github.com:manahl/dtale.git\n# install the dependencies\n$ python setup.py develop\n# start the server\n$ python dtale --csv-path /home/jdoe/my_csv.csv --csv-parse_dates date\n```\n\nYou can also run dtale from PyDev directly.\n\nYou will also want to import javascript dependencies and build the source:\n\n``` bash\n$ npm install\n# 1) a persistent server that serves the latest JS:\n$ npm run watch\n# 2) or one-off build:\n$ npm run build\n```\n\n### Running tests\n\nThe usual npm test command works:\n\n```\n$ npm test\n```\n\nYou can run individual test files:\n\n```\n$ TEST=static/__tests__/dtale/DataViewer-base-test.jsx npm run test-file\n```\n\n### Linting\n\nYou can lint all the JS and CSS to confirm there's nothing obviously wrong with\nit:\n\n``` bash\n$ npm run lint -s\n```\n\nYou can also lint individual JS files:\n\n``` bash\n$ npm run lint-js-file -s -- static/dtale/DataViewer.jsx\n```\n\n### Formatting JS\n\nYou can auto-format code as follows:\n\n``` bash\n$ npm run format\n```\n\n### Docker Development\n\nYou can build python 27-3 & run D-Tale as follows:\n```bash\n$ yarn run build\n$ docker-compose build dtale_2_7\n$ docker run -it --network host dtale_2_7:latest\n$ python\n>>> import pandas as pd\n>>> df = pd.DataFrame([dict(a=1,b=2,c=3)])\n>>> import dtale\n>>> dtale.show(df)\n```\nThen view your D-Tale instance in your browser using the link that gets printed\n\nYou can build python 36-1 & run D-Tale as follows:\n```bash\n$ yarn run build\n$ docker-compose build dtale_3_6\n$ docker run -it --network host dtale_3_6:latest\n$ python\n>>> import pandas as pd\n>>> df = pd.DataFrame([dict(a=1,b=2,c=3)])\n>>> import dtale\n>>> dtale.show(df)\n```\nThen view your D-Tale instance in your browser using the link that gets printed\n\n\n## Global State/Data Storage\n\nIf D-Tale is running in an environment with multiple python processes (ex: on a web server running [gunicorn](https://github.com/benoitc/gunicorn)) it will most likely encounter issues with inconsistent state.  Developers can fix this by configuring the system D-Tale uses for storing data.  Detailed documentation is available here: [Data Storage and managing Global State](https://github.com/man-group/dtale/blob/master/docs/GLOBAL_STATE.md)\n\n\n## Startup Behavior\n\nHere's a little background on how the `dtale.show()` function works:\n - by default it will look for ports between 40000 & 49000, but you can change that range by specifying the environment variables DTALE_MIN_PORT & DTALE_MAX_PORT\n - think of sessions as python consoles or jupyter notebooks\n\n1) Session 1 executes `dtale.show(df)` our state is:\n\n|Session|Port|Active Data IDs|URL(s)|\n|:-----:|:-----:|:-----:|:-----:|\n|1|40000|1|http://localhost:40000/dtale/main/1|\n\n2) Session 1 executes `dtale.show(df)` our state is:\n\n|Session|Port|Active Data IDs|URL(s)|\n|:-----:|:-----:|:-----:|:-----:|\n|1|40000|1,2|http://localhost:40000/dtale/main/[1,2]|\n\n2) Session 2 executes `dtale.show(df)` our state is:\n\n|Session|Port|Active Data IDs|URL(s)|\n|:-----:|:-----:|:-----:|:-----:|\n|1|40000|1,2|http://localhost:40000/dtale/main/[1,2]|\n|2|40001|1|http://localhost:40001/dtale/main/1|\n\n3) Session 1 executes `dtale.show(df, port=40001, force=True)` our state is:\n\n|Session|Port|Active Data IDs|URL(s)|\n|:-----:|:-----:|:-----:|:-----:|\n|1|40001|1,2,3|http://localhost:40001/dtale/main/[1,2,3]|\n\n4) Session 3 executes `dtale.show(df)` our state is:\n\n|Session|Port|Active Data IDs|URL(s)|\n|:-----:|:-----:|:-----:|:-----:|\n|1|40001|1,2,3|http://localhost:40001/dtale/main/[1,2,3]|\n|3|40000|1|http://localhost:40000/dtale/main/1|\n\n5) Session 2 executes `dtale.show(df)` our state is:\n\n|Session|Port|Active Data IDs|URL(s)|\n|:-----:|:-----:|:-----:|:-----:|\n|1|40001|1,2,3|http://localhost:40001/dtale/main/[1,2,3]|\n|3|40000|1|http://localhost:40000/dtale/main/1|\n|2|40002|1|http://localhost:40002/dtale/main/1|\n\n6) Session 4 executes `dtale.show(df, port=8080)` our state is:\n\n|Session|Port|Active Data IDs|URL(s)|\n|:-----:|:-----:|:-----:|:-----:|\n|1|40001|1,2,3|http://localhost:40001/dtale/main/[1,2,3]|\n|3|40000|1|http://localhost:40000/dtale/main/1|\n|2|40002|1|http://localhost:40002/dtale/main/1|\n|4|8080|1|http://localhost:8080/dtale/main/1|\n\n7) Session 1 executes `dtale.get_instance(1).kill()` our state is:\n\n|Session|Port|Active Data IDs|URL(s)|\n|:-----:|:-----:|:-----:|:-----:|\n|1|40001|2,3|http://localhost:40001/dtale/main/[2,3]|\n|3|40000|1|http://localhost:40000/dtale/main/1|\n|2|40002|1|http://localhost:40002/dtale/main/1|\n|4|8080|1|http://localhost:8080/dtale/main/1|\n\n7) Session 5 sets DTALE_MIN_RANGE to 30000 and DTALE_MAX_RANGE 39000 and executes `dtale.show(df)` our state is:\n\n|Session|Port|Active Data ID(s)|URL(s)|\n|:-----:|:-----:|:-----:|:-----:|\n|1|40001|2,3|http://localhost:40001/dtale/main/[2,3]|\n|3|40000|1|http://localhost:40000/dtale/main/1|\n|2|40002|1|http://localhost:40002/dtale/main/1|\n|4|8080|1|http://localhost:8080/dtale/main/1|\n|5|30000|1|http://localhost:30000/dtale/main/1|\n\n## Documentation\n\nHave a look at the [detailed documentation](https://dtale.readthedocs.io).\n\n## Requirements\n\nD-Tale works with:\n  \n  * Back-end\n    * arctic [extra]\n    * dash\n    * dash_daq\n    * Flask\n    * Flask-Compress\n    * Pandas\n    * plotly\n    * scipy\n    * six\n  * Front-end\n    * react-virtualized\n    * chart.js\n\n## Acknowledgements\n\nD-Tale has been under active development at [Man Numeric](http://www.numeric.com/) since 2019.\n\nOriginal concept and implementation: [Andrew Schonfeld](https://github.com/aschonfeld)\n\nContributors:\n\n * [Phillip Dupuis](https://github.com/phillipdupuis)\n * [Fernando Saravia Rajal](https://github.com/fersarr)\n * [Dominik Christ](https://github.com/DominikMChrist)\n * [Reza Moshksar](https://github.com/reza1615)\n * [Chris Boddy](https://github.com/cboddy)\n * [Jason Holden](https://github.com/jasonkholden)\n * [Tom Taylor](https://github.com/TomTaylorLondon)\n * [Wilfred Hughes](https://github.com/Wilfred)\n * Mike Kelly\n * [Vincent Riemer](https://github.com/vincentriemer)\n * [Youssef Habchi](http://youssef-habchi.com/) - title font\n * ... and many others ...\n\nContributions welcome!\n\n## License\n\nD-Tale is licensed under the GNU LGPL v2.1.  A copy of which is included in [LICENSE](LICENSE)\n"}}}